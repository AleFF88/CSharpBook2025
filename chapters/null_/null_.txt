NULL В C#
null это зарезервированное значение, которое означает, что переменная ссылочного типа не указывает ни на какой объект в памяти. null не имеет типа. Функционально это не объект, не структура, не значение — это отсутствие ссылки. 
На уровне CLR (Common Language Runtime), null — это просто нулевой указатель (0x00000000), который говорит: "Здесь ничего нет".

NULL И ССЫЛОЧНЫЕ ТИПЫ
Когда мы создаём переменную ссылочного типа, она по умолчанию содержит null, если она явно не проинициализизирована. В памяти это означает, что указатель на объект не установлен — переменная не содержит адрес в управляемой куче (heap). Если попытаться обратиться к члену объекта через null, CLR не сможет разыменовать указатель и выбросит NullReferenceException.
	
Что происходит при MyClass obj = null;
	Создаётся переменная obj (в стеке, если это локальная переменная).
	Ей присваивается значение null — то есть в ячейку записывается специальное значение (0x00000000), которое означает "нет ссылки".
	Никакой объект в куче не создаётся — потому что null не требует выделения памяти в куче.
Важно понимать, что null это отсутствие объекта, а не "пустой объект". Это позволяет создавать сущности без инициализации, но требует осторожности при использовании.

Когда мы присваиваем объекту null, то разрываем связь между переменной и объектом. Если больше нет ссылок на объект — он становится кандидатом на сборку мусора (GC).

До версии C# 8.0 всем ссылочным типам спокойно можно было присваивать значение null. Но начиная с версии C# 8.0 в язык была введена концепция ссылочных nullable-типов (nullable reference types) и nullable aware context - nullable-контекст, в котором можно использовать ссылочные nullable-типы.

Чтобы определить переменную/параметр ссылочного типа, как переменную/параметр, которым можно присваивать значение null, после названия типа указывается знак вопроса 
	string? optionalName = null; // может быть null
	string requiredName = "John"; // не должен быть null

Nullable-aware context это режим компилятора, который включает анализ null. Он может быть включён глобально в .csproj или локально в файле (#nullable enable). Когда контекст включён, компилятор предупреждает, если без проверки на null используется переменная, которая может быть null. 

Стоит отметить, что существует оператор ! — null-forgiving operator:
	string? name = GetName();
	Console.WriteLine(name!.Length); // говорит компилятору: "я уверен, что не null"
Использование его требует обдуманного подхода.
Так же существуют атрибуты [MaybeNull], [NotNull], [DisallowNull] — для более точного описания поведения методов и параметров.
