Паттерны проектирования
Паттерном (шаблоном) проектирования называют способ решения определённой задачи. В отличие от готовых функций или библиотек, паттерн нельзя просто взять и скопировать в программу. Паттерн представляет собой не какой-то конкретный код, а общую концепцию решения той или иной проблемы, которую нужно будет адаптировать под нужды конкретной программы.
Паттерны часто путают с алгоритмами. Хотя оба понятия описывают типовые решения каких-то известных проблем, это разные понятия. Алгоритм представляет собой чёткий набор действий, который нужно выполнить по шагам. Паттерн является высокоуровневым описанием решения, он не диктует конкретрые шаги, а описывает структуру решения. Реализация одного и того же паттерна может отличаться в двух разных программах.

ЗАЧЕМ НУЖНЫ ПАТТЕРНЫ
Можно писать хорошие программы, не зная ни одного паттерна. Более того, паттерны можно реализовать, даже не подозревая об этом. Однако знание паттернов может помочь решать задачи быстрее и эффективнее.
	* Некоторые паттерны очевидные, другие же могут удивить. Что бы придумать такое решение может потребоваться время и эксперименты. Гораздо быстрее использовать готовое и проверенное решение.
	* Унифицированное и ранее проверенное решение гарантирует отсутствие ошибок при решении задачи, так как скрытые проблемы уже давно найдены.
	* Можно быстро передать суть решения другому программисту просто назвав известное название использованного паттерна.

КЛАССИФИКАЦИЯ ПАТТЕРНОВ
В основном паттерны различают по назначению. 
	1. Порождающие паттерны — как правильно создавать объекты. Такие паттерны помогают создавать объекты гибко, не завязываясь на конкретные классы; так же помогают скрыть детали создания, чтобы код был чище и легче менять.
	Пример из обычной жизни это фабрика как конвейер, который сам решает, какого робота собрать.
	2. Структурные паттерны показывают как связывать объекты между собой. Они помогают организовать взаимосвязь между объектами и сделать архитектуру понятной и масштабируемой.
	Например адаптер как переходник между розеткой и вилкой: позволяет несовместимым объектам работать вместе.
	3. Поведенческие паттерны определяют как объекты общаются и принимают решения. Они помогают наладить коммуникацию между объектами, управляют логикой поведения.
	Например наблюдатель следит за другими и реагирует на изменения (как подписка на новости).